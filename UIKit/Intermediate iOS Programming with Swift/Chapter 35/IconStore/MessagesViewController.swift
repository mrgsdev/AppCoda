//
//  MessagesViewController.swift
//  IconStore
//
//  Created by mrgsdev on 22.05.2024.
//

import UIKit
import Messages
import IconDataKit

class MessagesViewController: MSMessagesAppViewController {
    
    @IBOutlet var tableView: UITableView!
    
    enum Section {
        case all
    }
    
    lazy var dataSource = configureDataSource()
    
    private var iconSet = IconData.iconSet
    private var selectedIcon: Icon?
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        tableView.dataSource = dataSource
        tableView.delegate = self
        
        updateSnapshot()
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
        
        guard presentationStyle == .expanded else {
            dismiss(animated: false, completion: nil)
            return
        }
        
        if let selectedMessage = conversation.selectedMessage {
            presentIconDetails(message: selectedMessage)
        }
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dismisses the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
    
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
        
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
        
        // Use this method to prepare for the change in presentation style.
        if presentationStyle == .compact {
            dismiss(animated: false, completion: nil)
            return
        }
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
        
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
    
    override func didSelect(_ message: MSMessage, conversation: MSConversation) {
        guard let selectedMessage = conversation.selectedMessage else {
                return
        }
        
        presentIconDetails(message: selectedMessage)
    }
    
    // MARK: - Navigation methods
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let identifier = segue.identifier, identifier == "IconDetail" {
            let destinationController = segue.destination as! IconDetailViewController
            destinationController.icon = selectedIcon
        }
    }
    
    // MARK: - Helper methods
    
    func presentIconDetails(message: MSMessage) {
        selectedIcon = Icon(message: message)
        performSegue(withIdentifier: "IconDetail", sender: self)
    }
    
}

extension MessagesViewController {
    
    func configureDataSource() -> UITableViewDiffableDataSource<Section, Icon> {
        
        let dataSource = UITableViewDiffableDataSource<Section, Icon>(tableView: tableView) { (tableView, indexPath, icon) -> UITableViewCell? in
            
            let cell = tableView.dequeueReusableCell(withIdentifier: "cell", for: indexPath) as! IconTableViewCell
            
            cell.nameLabel.text = icon.name
            cell.descriptionLabel.text = icon.description
            cell.priceLabel.text = "$\(icon.price)"
            cell.iconImageView.image = UIImage(named: icon.imageName)
            
            return cell
        }
        
        return dataSource
    }
    
    func updateSnapshot(animatingChange: Bool = false) {
        
        // Create a snapshot and populate the data
        var snapshot = NSDiffableDataSourceSnapshot<Section, Icon>()
        snapshot.appendSections([.all])
        snapshot.appendItems(iconSet, toSection: .all)
        
        dataSource.apply(snapshot, animatingDifferences: false)
    }
}

extension MessagesViewController: UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        
        requestPresentationStyle(.compact)
        tableView.deselectRow(at: indexPath, animated: true)
        
        let icon = iconSet[indexPath.row]
        
        if let conversation = activeConversation {
            let messageLayout = MSMessageTemplateLayout()
            messageLayout.caption = icon.name
            messageLayout.subcaption = "$\(icon.price)"
            messageLayout.image = UIImage(named: icon.imageName)
            
            let message = MSMessage()
            message.layout = messageLayout
            
            if var components = URLComponents(string: "http://www.appcoda.com") {
                components.queryItems = icon.queryItems
                message.url = components.url
            }
            
            conversation.insert(message, completionHandler: { (error) in
                if let error = error {
                    print(error)
                }
            })
        }
    }
}
